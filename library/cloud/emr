#!/usr/bin/python
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.

DOCUMENTATION = '''
---
module: emr
short_description: Manage an EMR cluster
description:
    - Create, configure, terminate Elastic MapReduce cluster. This module has a dependency on python-boto >= 2.13.0
version_added: "1.5"
options:
  name:
    description:
      - Name of the cluster
    required: true
    default: null
    aliases: []
  ec2_keyname:
    description:
      - key pair to use on the instance
    required: false
    default: null
    aliases: ['keypair']
  aws_secret_key:
    description:
      - AWS secret key. If not set then the value of the AWS_SECRET_KEY environment variable is used. 
    required: false
    default: null
    aliases: [ 'ec2_secret_key', 'secret_key' ]
  aws_access_key:
    description:
      - AWS access key. If not set then the value of the AWS_ACCESS_KEY environment variable is used.
    required: false
    default: null
    aliases: [ 'ec2_access_key', 'access_key' ]
  zone:
    description:
      - AWS availability zone in which to launch the instance
    required: false
    default: null
    aliases: [ 'aws_zone', 'ec2_zone' ]
  tags:
    description:
      - A hash/dictionary of tags to add to the new cluster; '{"key":"value"}' and '{"key":"value","key":"value"}'
    required: false
    default: null
    aliases: []
  log_uri:
    description:
      - URI of the S3 bucket to place logs
    required: false
    default: null
    aliases: []
  vpc_subnet_id:
    description:
      - The subnet ID in which to launch the instance (VPC)
    required: false
    default: null
    aliases: []

requirements: [ "boto" ]
author: Scott Armit
'''

EXAMPLES = '''
# Note: None of these examples set aws_access_key, aws_secret_key, or region.
# It is assumed that their matching environment variables are set.

# Wordcount sample EMR application
'''

import sys
import time
from datetime import datetime

try:
    import boto.emr
    from boto.emr.connection import EmrConnection
    from boto.emr.step import StreamingStep
except ImportError:
    print "failed=True msg='boto.emr required for this module'"
    sys.exit(1)

def run_jobflow(module, emr):
    """
    :param module: AnsibleModule object
    :returns EMR object: The ID of the created job flow
    """

    _, aws_access_key, aws_secret_key, region = get_ec2_creds(module)

    job_ts = datetime.now().strftime("%Y%m%d%H%M%S")
    step = StreamingStep(name='sarmit wordcount ansible',
                         mapper='s3n://elasticmapreduce/samples/wordcount/wordSplitter.py',
                         reducer='aggregate',
                         input='s3n://elasticmapreduce/samples/wordcount/input',
                         output='{0}/wordcount_output/{1}'.format(module.params.get('log_uri'), job_ts))

    my_api_params = None
    if module.params.get('vpc_subnet_id'):
        my_api_params = {'Instances.Ec2SubnetId': module.params.get('vpc_subnet_id')}

    job_id = emr.run_jobflow(name=module.params.get('cluster_name'),
                             ec2_keyname=module.params.get('ec2_keyname'),
                             log_uri='{0}/jobflow_logs_{1}'.format(module.params.get('log_uri'), job_ts),
                             api_params=my_api_params,
                             ami_version=module.params.get('ami_version'),
                             job_flow_role=module.params.get('job_flow_role'),
                             visible_to_all_users=module.params.get('visible_to_all_users'),
                             master_instance_type=module.params.get('master_instance_type'),
                             slave_instance_type=module.params.get('slave_instance_type'),
                             enable_debugging=module.params.get('enable_debugging'),
                             num_instances=module.params.get('num_instances'),
                             steps=[step])
    return job_id
    
def get_bootstrap_actions(module):
    """
    :param module: AnsibleModule object
    :returns boto.emr.emrobject.BootstrapAction object:
    """

    if not isinstance(module.params.get('bootstrap_actions'), list):
        module.fail_json(msg='bootstrap_actions needs to be a list of actions')

        
    
def emr_connect(module):
    """
    :param module: AnsibleModule object
    :returns : EMR connection object
    """

    _, aws_access_key, aws_secret_key, region = get_ec2_creds(module)
    validate_certs = module.params.get('validate_certs', True)

    # If we have a region specified, connect to its endpoint.
    if region:
        try:
            if HAS_LOOSE_VERSION and LooseVersion(boto.Version) >= LooseVersion("2.6.0"):
                emr = boto.emr.connect_to_region(region, 
                                                 aws_access_key_id=aws_access_key, 
                                                 aws_secret_access_key=aws_secret_key, 
                                                 validate_certs=validate_certs)
            else:
                emr = boto.emr.connect_to_region(region,
                                                 aws_access_key_id=aws_access_key,
                                                 aws_secret_access_key=aws_secret_key)

        except boto.exception.NoAuthHandlerFound, e:
            module.fail_json(msg = str(e))

    # Otherwise, no region so we fallback to the old connection method
    else:
        try:
            if HAS_LOOSE_VERSION and LooseVersion(boto.Version) >= LooseVersion("2.6.0"):
                emr = EmrConnection(aws_access_key, aws_secret_key, validate_certs=validate_certs)
            else:
                emr = EmrConnection(aws_access_key, aws_secret_key)

        except boto.exception.NoAuthHandlerFound, e:
            module.fail_json(msg = str(e))

    return emr

def main():
    module = AnsibleModule(
        argument_spec        = dict(
            ec2_keyname          = dict(aliases = ['keypair']),
            cluster_name         = dict(required=True),
            num_instances        = dict(type='int', default=1),
            bootstrap_actions    = dict(type='list'),
            instance_tags        = dict(type='dict'),
            log_uri              = dict(required=True),
            vpc_subnet_id        = dict(),
            ami_version          = dict(choices=['1.0', '2.0', 'latest'], default='latest'),
            job_flow_role        = dict(default=None),
            visible_to_all_users = dict(default=None),
            master_instance_type = dict(default='m1.small'),
            slave_instance_type  = dict(default='m1.small'),
            enable_debugging     = dict(default=False),
        )
    )

    emr = emr_connect(module)
    bsa = get_bootstrap_actions(module)
    job_id = run_jobflow(module, emr)

    module.exit_json(changed=True, jobflow_id=job_id)

# import module snippets
from ansible.module_utils.basic import *
from ansible.module_utils.ec2 import *

main()
